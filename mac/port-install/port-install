#!/usr/bin/env bash

# port-install - install MacPorts from a tarball to a custom prefix
# copyright (c) 2021  Alex Rogers (https://github.com/linguisticmind)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

############################################################

# This script is a tool intended to help automate installation of
# MacPorts to a custom prefix. It is based on the instructions provided here:
# https://guide.macports.org/#installing.macports.source
#
# If you'd like to install MacPorts to the default prefix (/opt/local), then it
# is best to use the default installation instructions provided on this page:
# https://www.macports.org/install.php

# MacPorts tarballs can be downloaded from 
# https://distfiles.macports.org/MacPorts/
# Look for a .tar.bz2 file with the latest version number.

# Once you have the link, you can download the tarball
# directly from the command line using curl:
# curl -O https://distfiles.macports.org/MacPorts/MacPorts-2.6.4.tar.bz2
# The file will be saved in the current working directory.

usage="Usage: ${0##*/} <tarball> <prefix>"

if [[ $# = 0 ]]; then
  echo "${0##*/} - install MacPorts from a tarball to a custom prefix"
  echo "$usage" 
  echo "This script must be run as root."
  exit
fi

[[ $EUID -ne 0 ]] && echo "This script must be run as root." >&2 && exit 1
[[ ! $1 || ! $2 ]] && echo "Insufficient arguments."$'\n'"$usage" >&2 && exit 1

tarball="$1" prefix="$2"
[[ ! -f "$tarball" ]] && echo "Tarball can't be found." >&2 && exit 1
[[ $PWD = *\ * ]] && echo "The absolute path of current working directory can't contain spaces." >&2 && exit
[[ $prefix = *\ * ]] && echo "Prefix can't contain spaces." && exit 1

[[ $prefix != /* ]] && prefix="$PWD/$2" # Making prefix an absolute path

if [[ -d "$prefix" ]]; then
  echo "Prefix directory already exists." >&2
  while read -p "If you proceed, the '$prefix' directory will be deleted and a new one with the same name will be created."$'\n'"Proceed? [y/N] "; do
    if [[ $REPLY =  [Yy] ]]; then
      rm -rf -- "$prefix"
      mkdir -p -- "$prefix"
      break
    elif [[ ! $REPLY || $REPLY = [Nn] ]]; then
      exit 1
    fi 
  done
elif [[ -e "$prefix" ]]; then 
  echo "'$2' is not a directory." >&2 && exit 1
fi

echo "Extracting." >&2
tar -xvf "$tarball"

extracted="${1##*/}" extracted="${extracted%%.tar*}"

cd "$extracted"

export PATH="/bin:/sbin:/usr/bin:/usr/sbin"

./configure \
  --prefix="$prefix" \
  --with-applications-dir="$prefix/Applications" \
  --without-startupitems
make
make install

cd ..

echo "Cleaning up." >&2
rm -rf -- "$extracted"

echo "Done." >&2
